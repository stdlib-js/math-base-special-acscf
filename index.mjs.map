{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport asinf from '@stdlib/math-base-special-asinf';\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the arccosecant of a single-precision floating-point number.\n*\n* ## Method\n*\n* ```text\n* \\operatorname{acscf}(x) = \\operatorname{asinf}(\\frac{1}{x})\n* ```\n*\n* @param {number} x - input value\n* @returns {number} arccosecant (in radians)\n*\n* @example\n* var v = acscf( 1.0 );\n* // returns ~1.57\n*\n* @example\n* var v = acscf( 3.141592653589793 );\n* // returns ~0.32\n*\n* @example\n* var v = acscf( -3.141592653589793 );\n* // returns ~-0.32\n*\n* @example\n* var v = acscf( NaN );\n* // returns NaN\n*/\nfunction acscf( x ) {\n\treturn asinf( float64ToFloat32( 1.0 / float64ToFloat32( x ) ) );\n}\n\n\n// EXPORTS //\n\nexport default acscf;\n"],"names":["acscf","x","asinf","float64ToFloat32"],"mappings":";;2MAwDA,SAASA,EAAOC,GACf,OAAOC,EAAOC,EAAkB,EAAMA,EAAkBF,IACzD"}